/*
Deployment script for Kyc.SanctionLists.SanctionListsDb

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Kyc.SanctionLists.SanctionListsDb"
:setvar DefaultFilePrefix "Kyc.SanctionLists.SanctionListsDb"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [sl]...';


GO
CREATE SCHEMA [sl]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [sl].[EnumActionTypes]...';


GO
CREATE TABLE [sl].[EnumActionTypes] (
    [ActionTypeId] INT          IDENTITY (1, 1) NOT NULL,
    [Name]         VARCHAR (50) NOT NULL,
    [Description]  TEXT         NOT NULL,
    PRIMARY KEY CLUSTERED ([ActionTypeId] ASC)
);


GO
PRINT N'Creating [sl].[ContactInfo]...';


GO
CREATE TABLE [sl].[ContactInfo] (
    [ContactInfoId]         INT            IDENTITY (1, 1) NOT NULL,
    [OriginalContactInfoId] INT            NOT NULL,
    [EntityId]              INT            NOT NULL,
    [RegulationId]          INT            NOT NULL,
    [ContactInfoTypeId]     INT            NOT NULL,
    [Value]                 NVARCHAR (256) NOT NULL,
    [RemarkId]              INT            NULL,
    PRIMARY KEY CLUSTERED ([ContactInfoId] ASC)
);


GO
PRINT N'Creating [sl].[Updates]...';


GO
CREATE TABLE [sl].[Updates] (
    [UpdateId]      INT      IDENTITY (1, 1) NOT NULL,
    [UpdatedDate]   DATETIME NOT NULL,
    [PublicDate]    DATETIME NOT NULL,
    [ListTypeId]    INT      NOT NULL,
    [UserId]        INT      NOT NULL,
    [ListArchiveId] INT      NULL,
    PRIMARY KEY CLUSTERED ([UpdateId] ASC)
);


GO
PRINT N'Creating [sl].[Remarks]...';


GO
CREATE TABLE [sl].[Remarks] (
    [RemarkId] INT  IDENTITY (1, 1) NOT NULL,
    [Value]    TEXT NOT NULL,
    PRIMARY KEY CLUSTERED ([RemarkId] ASC)
);


GO
PRINT N'Creating [sl].[NameAliases]...';


GO
CREATE TABLE [sl].[NameAliases] (
    [NameAliasId]         INT             IDENTITY (1, 1) NOT NULL,
    [OriginalNameAliasId] INT             NOT NULL,
    [EntityId]            INT             NOT NULL,
    [RegulationId]        INT             NOT NULL,
    [LastName]            NVARCHAR (256)  NULL,
    [FirstName]           NVARCHAR (256)  NULL,
    [MiddleName]          NVARCHAR (256)  NULL,
    [WholeName]           NVARCHAR (512)  NOT NULL,
    [PrefixName]          NVARCHAR (20)   NULL,
    [GenderId]            INT             NOT NULL,
    [Title]               NVARCHAR (2048) NULL,
    [LanguageIso3]        CHAR (3)        NULL,
    [RemarkId]            INT             NULL,
    [Quality]             SMALLINT        NULL,
    [Function]            NVARCHAR (2048) NULL,
    PRIMARY KEY CLUSTERED ([NameAliasId] ASC)
);


GO
PRINT N'Creating [sl].[Logs]...';


GO
CREATE TABLE [sl].[Logs] (
    [LogId]        INT          IDENTITY (1, 1) NOT NULL,
    [LogDate]      DATETIME     NOT NULL,
    [ListTypeId]   INT          NOT NULL,
    [Username]     VARCHAR (96) NOT NULL,
    [Description]  TEXT         NULL,
    [ActionTypeId] INT          NOT NULL,
    PRIMARY KEY CLUSTERED ([LogId] ASC)
);


GO
PRINT N'Creating [sl].[Identifications]...';


GO
CREATE TABLE [sl].[Identifications] (
    [IdentificationId]         INT            IDENTITY (1, 1) NOT NULL,
    [OriginalIdentificationId] INT            NOT NULL,
    [EntityId]                 INT            NOT NULL,
    [RegulationId]             INT            NOT NULL,
    [IdentificationTypeId]     INT            NOT NULL,
    [DocumentNumber]           NVARCHAR (256) NOT NULL,
    [IssueCity]                NVARCHAR (256) NULL,
    [IssueCountryIso3]         CHAR (3)       NULL,
    [IssueDate]                DATE           NULL,
    [RemarkId]                 INT            NULL,
    PRIMARY KEY CLUSTERED ([IdentificationId] ASC)
);


GO
PRINT N'Creating [sl].[EnumSubjectTypes]...';


GO
CREATE TABLE [sl].[EnumSubjectTypes] (
    [SubjectTypeId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]          VARCHAR (128) NOT NULL,
    PRIMARY KEY CLUSTERED ([SubjectTypeId] ASC)
);


GO
PRINT N'Creating [sl].[EnumStatuses]...';


GO
CREATE TABLE [sl].[EnumStatuses] (
    [StatusId] INT           NOT NULL,
    [Name]     VARCHAR (128) NOT NULL,
    PRIMARY KEY CLUSTERED ([StatusId] ASC)
);


GO
PRINT N'Creating [sl].[EnumListTypes]...';


GO
CREATE TABLE [sl].[EnumListTypes] (
    [ListTypeId]  INT           IDENTITY (1, 1) NOT NULL,
    [Name]        VARCHAR (128) NOT NULL,
    [Description] TEXT          NOT NULL,
    PRIMARY KEY CLUSTERED ([ListTypeId] ASC)
);


GO
PRINT N'Creating [sl].[EnumLanguages]...';


GO
CREATE TABLE [sl].[EnumLanguages] (
    [Iso3] CHAR (3)      NOT NULL,
    [Iso2] CHAR (2)      NOT NULL,
    [Name] VARCHAR (128) NOT NULL,
    PRIMARY KEY CLUSTERED ([Iso3] ASC)
);


GO
PRINT N'Creating [sl].[EnumIdentificationTypes]...';


GO
CREATE TABLE [sl].[EnumIdentificationTypes] (
    [IdentificationTypeId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]                 VARCHAR (128) NOT NULL,
    [Description]          TEXT          NOT NULL,
    PRIMARY KEY CLUSTERED ([IdentificationTypeId] ASC)
);


GO
PRINT N'Creating [sl].[EnumGenders]...';


GO
CREATE TABLE [sl].[EnumGenders] (
    [GenderId] INT          NOT NULL,
    [Name]     VARCHAR (20) NOT NULL,
    PRIMARY KEY CLUSTERED ([GenderId] ASC)
);


GO
PRINT N'Creating [sl].[EnumCountries]...';


GO
CREATE TABLE [sl].[EnumCountries] (
    [Iso3]      CHAR (3)       NOT NULL,
    [Iso2]      CHAR (2)       NOT NULL,
    [Name]      NVARCHAR (128) NOT NULL,
    [NiceName]  NVARCHAR (128) NOT NULL,
    [NumCode]   INT            NULL,
    [PhoneCode] INT            NULL,
    PRIMARY KEY CLUSTERED ([Iso3] ASC)
);


GO
PRINT N'Creating [sl].[EnumContactInfoTypes]...';


GO
CREATE TABLE [sl].[EnumContactInfoTypes] (
    [ContactInfoTypeId] INT           IDENTITY (1, 1) NOT NULL,
    [Name]              VARCHAR (128) NOT NULL,
    PRIMARY KEY CLUSTERED ([ContactInfoTypeId] ASC)
);


GO
PRINT N'Creating [sl].[Entities]...';


GO
CREATE TABLE [sl].[Entities] (
    [EntityId]         INT IDENTITY (1, 1) NOT NULL,
    [OriginalEntityId] INT NOT NULL,
    [RegulationId]     INT NOT NULL,
    [SubjectTypeId]    INT NOT NULL,
    [StatusId]         INT NOT NULL,
    [RemarkId]         INT NULL,
    [ListTypeId]       INT NOT NULL,
    [ListArchiveId]    INT NULL,
    PRIMARY KEY CLUSTERED ([EntityId] ASC)
);


GO
PRINT N'Creating [sl].[Births]...';


GO
CREATE TABLE [sl].[Births] (
    [BirthId]         INT             IDENTITY (1, 1) NOT NULL,
    [OriginalBirthId] INT             NOT NULL,
    [EntityId]        INT             NOT NULL,
    [RegulationId]    INT             NOT NULL,
    [Year]            INT             NULL,
    [Month]           INT             NULL,
    [Day]             INT             NULL,
    [Place]           NVARCHAR (2048) NULL,
    [CountryIso3]     CHAR (3)        NULL,
    [RemarkId]        INT             NULL,
    PRIMARY KEY CLUSTERED ([BirthId] ASC)
);


GO
PRINT N'Creating [sl].[Banks]...';


GO
CREATE TABLE [sl].[Banks] (
    [BankId]            INT            IDENTITY (1, 1) NOT NULL,
    [EntityId]          INT            NOT NULL,
    [BankName]          NVARCHAR (256) NOT NULL,
    [AccountHolderName] NVARCHAR (512) NOT NULL,
    [AccountNumber]     NVARCHAR (20)  NOT NULL,
    [CountryIso3]       CHAR (3)       NULL,
    [Swift]             NVARCHAR (11)  NULL,
    [Iban]              NVARCHAR (40)  NULL,
    [RemarkId]          INT            NULL,
    PRIMARY KEY CLUSTERED ([BankId] ASC)
);


GO
PRINT N'Creating [sl].[Addresses]...';


GO
CREATE TABLE [sl].[Addresses] (
    [AddressId]         INT            IDENTITY (1, 1) NOT NULL,
    [OriginalAddressId] INT            NOT NULL,
    [EntityId]          INT            NOT NULL,
    [RegulationId]      INT            NOT NULL,
    [Number]            NVARCHAR (20)  NULL,
    [Street]            NVARCHAR (128) NULL,
    [Zipcode]           NVARCHAR (20)  NULL,
    [City]              NVARCHAR (128) NULL,
    [CountryIso3]       CHAR (3)       NULL,
    [RemarkId]          INT            NULL,
    PRIMARY KEY CLUSTERED ([AddressId] ASC)
);


GO
PRINT N'Creating [sl].[Citizenships]...';


GO
CREATE TABLE [sl].[Citizenships] (
    [CitizenshipId]         INT      IDENTITY (1, 1) NOT NULL,
    [OriginalCitizenshipId] INT      NOT NULL,
    [EntityId]              INT      NOT NULL,
    [RegulationId]          INT      NOT NULL,
    [CountryIso3]           CHAR (3) NOT NULL,
    [RemarkId]              INT      NULL,
    PRIMARY KEY CLUSTERED ([CitizenshipId] ASC)
);


GO
PRINT N'Creating [sl].[ListArchive]...';


GO
CREATE TABLE [sl].[ListArchive] (
    [ListArchiveId] INT             IDENTITY (1, 1) NOT NULL,
    [Date]          DATETIME        NOT NULL,
    [File]          VARBINARY (MAX) NOT NULL,
    PRIMARY KEY CLUSTERED ([ListArchiveId] ASC)
);


GO
PRINT N'Creating [sl].[Settings]...';


GO
CREATE TABLE [sl].[Settings] (
    [SettingId]  INT          IDENTITY (1, 1) NOT NULL,
    [Key]        VARCHAR (50) NOT NULL,
    [Value]      TEXT         NOT NULL,
    [ListTypeId] INT          NULL,
    PRIMARY KEY CLUSTERED ([SettingId] ASC),
    CONSTRAINT [AK_Settings_Key_ListTypeId] UNIQUE NONCLUSTERED ([Key] ASC, [ListTypeId] ASC)
);


GO
PRINT N'Creating [sl].[Regulations]...';


GO
CREATE TABLE [sl].[Regulations] (
    [RegulationId]     INT            IDENTITY (1, 1) NOT NULL,
    [RegulationTitle]  NVARCHAR (128) NOT NULL,
    [RegulationDate]   DATE           NULL,
    [PublicationDate]  DATE           NOT NULL,
    [PublicationTitle] NVARCHAR (128) NOT NULL,
    [PublicationUrl]   NVARCHAR (256) NOT NULL,
    [RemarkId]         INT            NULL,
    [Programme]        NVARCHAR (20)  NOT NULL,
    [ListTypeId]       INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([RegulationId] ASC)
);


GO
PRINT N'Creating FK_ContactInfo_To_Entities...';


GO
ALTER TABLE [sl].[ContactInfo]
    ADD CONSTRAINT [FK_ContactInfo_To_Entities] FOREIGN KEY ([EntityId]) REFERENCES [sl].[Entities] ([EntityId]);


GO
PRINT N'Creating FK_ContactInfo_To_Regulations...';


GO
ALTER TABLE [sl].[ContactInfo]
    ADD CONSTRAINT [FK_ContactInfo_To_Regulations] FOREIGN KEY ([RegulationId]) REFERENCES [sl].[Regulations] ([RegulationId]);


GO
PRINT N'Creating FK_ContactInfo_To_ContactInfoTypes...';


GO
ALTER TABLE [sl].[ContactInfo]
    ADD CONSTRAINT [FK_ContactInfo_To_ContactInfoTypes] FOREIGN KEY ([ContactInfoTypeId]) REFERENCES [sl].[EnumContactInfoTypes] ([ContactInfoTypeId]);


GO
PRINT N'Creating FK_ContactInfo_To_Remarks...';


GO
ALTER TABLE [sl].[ContactInfo]
    ADD CONSTRAINT [FK_ContactInfo_To_Remarks] FOREIGN KEY ([RemarkId]) REFERENCES [sl].[Remarks] ([RemarkId]);


GO
PRINT N'Creating FK_Updates_To_ListTypes...';


GO
ALTER TABLE [sl].[Updates]
    ADD CONSTRAINT [FK_Updates_To_ListTypes] FOREIGN KEY ([ListTypeId]) REFERENCES [sl].[EnumListTypes] ([ListTypeId]);


GO
PRINT N'Creating FK_Updates_To_ListArchive...';


GO
ALTER TABLE [sl].[Updates]
    ADD CONSTRAINT [FK_Updates_To_ListArchive] FOREIGN KEY ([ListArchiveId]) REFERENCES [sl].[ListArchive] ([ListArchiveId]);


GO
PRINT N'Creating FK_NameAliases_To_Entities...';


GO
ALTER TABLE [sl].[NameAliases]
    ADD CONSTRAINT [FK_NameAliases_To_Entities] FOREIGN KEY ([EntityId]) REFERENCES [sl].[Entities] ([EntityId]);


GO
PRINT N'Creating FK_NameAliases_To_Regulations...';


GO
ALTER TABLE [sl].[NameAliases]
    ADD CONSTRAINT [FK_NameAliases_To_Regulations] FOREIGN KEY ([RegulationId]) REFERENCES [sl].[Regulations] ([RegulationId]);


GO
PRINT N'Creating FK_NameAliases_To_Genders...';


GO
ALTER TABLE [sl].[NameAliases]
    ADD CONSTRAINT [FK_NameAliases_To_Genders] FOREIGN KEY ([GenderId]) REFERENCES [sl].[EnumGenders] ([GenderId]);


GO
PRINT N'Creating FK_NameAliases_To_Languages...';


GO
ALTER TABLE [sl].[NameAliases]
    ADD CONSTRAINT [FK_NameAliases_To_Languages] FOREIGN KEY ([LanguageIso3]) REFERENCES [sl].[EnumLanguages] ([Iso3]);


GO
PRINT N'Creating FK_NameAliases_To_Remarks...';


GO
ALTER TABLE [sl].[NameAliases]
    ADD CONSTRAINT [FK_NameAliases_To_Remarks] FOREIGN KEY ([RemarkId]) REFERENCES [sl].[Remarks] ([RemarkId]);


GO
PRINT N'Creating FK_Logs_To_ListTypes...';


GO
ALTER TABLE [sl].[Logs]
    ADD CONSTRAINT [FK_Logs_To_ListTypes] FOREIGN KEY ([ListTypeId]) REFERENCES [sl].[EnumListTypes] ([ListTypeId]);


GO
PRINT N'Creating FK_Logs_To_EnumActionTypes...';


GO
ALTER TABLE [sl].[Logs]
    ADD CONSTRAINT [FK_Logs_To_EnumActionTypes] FOREIGN KEY ([ActionTypeId]) REFERENCES [sl].[EnumActionTypes] ([ActionTypeId]);


GO
PRINT N'Creating FK_Identifications_To_Entities...';


GO
ALTER TABLE [sl].[Identifications]
    ADD CONSTRAINT [FK_Identifications_To_Entities] FOREIGN KEY ([EntityId]) REFERENCES [sl].[Entities] ([EntityId]);


GO
PRINT N'Creating FK_Identifications_To_Regulations...';


GO
ALTER TABLE [sl].[Identifications]
    ADD CONSTRAINT [FK_Identifications_To_Regulations] FOREIGN KEY ([RegulationId]) REFERENCES [sl].[Regulations] ([RegulationId]);


GO
PRINT N'Creating FK_Identifications_To_IdentificationTypes...';


GO
ALTER TABLE [sl].[Identifications]
    ADD CONSTRAINT [FK_Identifications_To_IdentificationTypes] FOREIGN KEY ([IdentificationTypeId]) REFERENCES [sl].[EnumIdentificationTypes] ([IdentificationTypeId]);


GO
PRINT N'Creating FK_Identifications_To_Countries...';


GO
ALTER TABLE [sl].[Identifications]
    ADD CONSTRAINT [FK_Identifications_To_Countries] FOREIGN KEY ([IssueCountryIso3]) REFERENCES [sl].[EnumCountries] ([Iso3]);


GO
PRINT N'Creating FK_Identifications_To_Remarks...';


GO
ALTER TABLE [sl].[Identifications]
    ADD CONSTRAINT [FK_Identifications_To_Remarks] FOREIGN KEY ([RemarkId]) REFERENCES [sl].[Remarks] ([RemarkId]);


GO
PRINT N'Creating FK_Entities_To_Regulations...';


GO
ALTER TABLE [sl].[Entities]
    ADD CONSTRAINT [FK_Entities_To_Regulations] FOREIGN KEY ([RegulationId]) REFERENCES [sl].[Regulations] ([RegulationId]);


GO
PRINT N'Creating FK_Entities_To_SubjectTypes...';


GO
ALTER TABLE [sl].[Entities]
    ADD CONSTRAINT [FK_Entities_To_SubjectTypes] FOREIGN KEY ([SubjectTypeId]) REFERENCES [sl].[EnumSubjectTypes] ([SubjectTypeId]);


GO
PRINT N'Creating FK_Entities_To_Statuses...';


GO
ALTER TABLE [sl].[Entities]
    ADD CONSTRAINT [FK_Entities_To_Statuses] FOREIGN KEY ([StatusId]) REFERENCES [sl].[EnumStatuses] ([StatusId]);


GO
PRINT N'Creating FK_Entities_To_Remarks...';


GO
ALTER TABLE [sl].[Entities]
    ADD CONSTRAINT [FK_Entities_To_Remarks] FOREIGN KEY ([RemarkId]) REFERENCES [sl].[Remarks] ([RemarkId]);


GO
PRINT N'Creating FK_Entities_To_ListTypes...';


GO
ALTER TABLE [sl].[Entities]
    ADD CONSTRAINT [FK_Entities_To_ListTypes] FOREIGN KEY ([ListTypeId]) REFERENCES [sl].[EnumListTypes] ([ListTypeId]);


GO
PRINT N'Creating FK_Entities_To_ListArchive...';


GO
ALTER TABLE [sl].[Entities]
    ADD CONSTRAINT [FK_Entities_To_ListArchive] FOREIGN KEY ([ListArchiveId]) REFERENCES [sl].[ListArchive] ([ListArchiveId]);


GO
PRINT N'Creating FK_Births_To_Entities...';


GO
ALTER TABLE [sl].[Births]
    ADD CONSTRAINT [FK_Births_To_Entities] FOREIGN KEY ([EntityId]) REFERENCES [sl].[Entities] ([EntityId]);


GO
PRINT N'Creating FK_Births_To_Regulations...';


GO
ALTER TABLE [sl].[Births]
    ADD CONSTRAINT [FK_Births_To_Regulations] FOREIGN KEY ([RegulationId]) REFERENCES [sl].[Regulations] ([RegulationId]);


GO
PRINT N'Creating FK_Births_To_Countries...';


GO
ALTER TABLE [sl].[Births]
    ADD CONSTRAINT [FK_Births_To_Countries] FOREIGN KEY ([CountryIso3]) REFERENCES [sl].[EnumCountries] ([Iso3]);


GO
PRINT N'Creating FK_BirthDates_To_Remarks...';


GO
ALTER TABLE [sl].[Births]
    ADD CONSTRAINT [FK_BirthDates_To_Remarks] FOREIGN KEY ([RemarkId]) REFERENCES [sl].[Remarks] ([RemarkId]);


GO
PRINT N'Creating FK_Banks_To_Entities...';


GO
ALTER TABLE [sl].[Banks]
    ADD CONSTRAINT [FK_Banks_To_Entities] FOREIGN KEY ([EntityId]) REFERENCES [sl].[Entities] ([EntityId]);


GO
PRINT N'Creating FK_Banks_To_Countries...';


GO
ALTER TABLE [sl].[Banks]
    ADD CONSTRAINT [FK_Banks_To_Countries] FOREIGN KEY ([CountryIso3]) REFERENCES [sl].[EnumCountries] ([Iso3]);


GO
PRINT N'Creating FK_Banks_To_Remarks...';


GO
ALTER TABLE [sl].[Banks]
    ADD CONSTRAINT [FK_Banks_To_Remarks] FOREIGN KEY ([RemarkId]) REFERENCES [sl].[Remarks] ([RemarkId]);


GO
PRINT N'Creating FK_Addresses_To_Entities...';


GO
ALTER TABLE [sl].[Addresses]
    ADD CONSTRAINT [FK_Addresses_To_Entities] FOREIGN KEY ([EntityId]) REFERENCES [sl].[Entities] ([EntityId]);


GO
PRINT N'Creating FK_Addresses_To_Regulations...';


GO
ALTER TABLE [sl].[Addresses]
    ADD CONSTRAINT [FK_Addresses_To_Regulations] FOREIGN KEY ([RegulationId]) REFERENCES [sl].[Regulations] ([RegulationId]);


GO
PRINT N'Creating FK_Addresses_To_Countries...';


GO
ALTER TABLE [sl].[Addresses]
    ADD CONSTRAINT [FK_Addresses_To_Countries] FOREIGN KEY ([CountryIso3]) REFERENCES [sl].[EnumCountries] ([Iso3]);


GO
PRINT N'Creating FK_Addresses_To_Remarks...';


GO
ALTER TABLE [sl].[Addresses]
    ADD CONSTRAINT [FK_Addresses_To_Remarks] FOREIGN KEY ([RemarkId]) REFERENCES [sl].[Remarks] ([RemarkId]);


GO
PRINT N'Creating FK_Citizenships_To_Entities...';


GO
ALTER TABLE [sl].[Citizenships]
    ADD CONSTRAINT [FK_Citizenships_To_Entities] FOREIGN KEY ([EntityId]) REFERENCES [sl].[Entities] ([EntityId]);


GO
PRINT N'Creating FK_Citizens_To_Regulations...';


GO
ALTER TABLE [sl].[Citizenships]
    ADD CONSTRAINT [FK_Citizens_To_Regulations] FOREIGN KEY ([RegulationId]) REFERENCES [sl].[Regulations] ([RegulationId]);


GO
PRINT N'Creating FK_Citizens_To_Countries...';


GO
ALTER TABLE [sl].[Citizenships]
    ADD CONSTRAINT [FK_Citizens_To_Countries] FOREIGN KEY ([CountryIso3]) REFERENCES [sl].[EnumCountries] ([Iso3]);


GO
PRINT N'Creating FK_Citizens_To_Remarks...';


GO
ALTER TABLE [sl].[Citizenships]
    ADD CONSTRAINT [FK_Citizens_To_Remarks] FOREIGN KEY ([RemarkId]) REFERENCES [sl].[Remarks] ([RemarkId]);


GO
PRINT N'Creating FK_Settings_To_ListTypes...';


GO
ALTER TABLE [sl].[Settings]
    ADD CONSTRAINT [FK_Settings_To_ListTypes] FOREIGN KEY ([ListTypeId]) REFERENCES [sl].[EnumListTypes] ([ListTypeId]);


GO
PRINT N'Creating FK_Regulations_To_Remarks...';


GO
ALTER TABLE [sl].[Regulations]
    ADD CONSTRAINT [FK_Regulations_To_Remarks] FOREIGN KEY ([RemarkId]) REFERENCES [sl].[Remarks] ([RemarkId]);


GO
PRINT N'Creating FK_Regulations_To_ListTypes...';


GO
ALTER TABLE [sl].[Regulations]
    ADD CONSTRAINT [FK_Regulations_To_ListTypes] FOREIGN KEY ([ListTypeId]) REFERENCES [sl].[EnumListTypes] ([ListTypeId]);


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b1a808e7-f9e8-4f2b-9bfa-20d38a0d4fb2')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b1a808e7-f9e8-4f2b-9bfa-20d38a0d4fb2')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '35353f95-aca9-43e1-a962-b7b6650e3c8e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('35353f95-aca9-43e1-a962-b7b6650e3c8e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1ea53c22-f69c-4aff-9970-ed0696a351f9')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1ea53c22-f69c-4aff-9970-ed0696a351f9')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b8797849-16f9-4a66-a170-f88e7ccd786a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b8797849-16f9-4a66-a170-f88e7ccd786a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '3dcf1414-c7c8-4f3b-b7f4-0dc189e9e94c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('3dcf1414-c7c8-4f3b-b7f4-0dc189e9e94c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '6db9035d-092a-4d35-8111-12731fcaef1f')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('6db9035d-092a-4d35-8111-12731fcaef1f')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd61b67ab-d5fa-467f-9116-71df170dca57')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d61b67ab-d5fa-467f-9116-71df170dca57')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1fdfe54a-4d65-48b3-93bb-7d38af361440')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1fdfe54a-4d65-48b3-93bb-7d38af361440')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd79cf3bd-9cfb-4f1a-9e24-8a66a6d1b6d8')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d79cf3bd-9cfb-4f1a-9e24-8a66a6d1b6d8')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'caba6c24-c453-4546-b315-8e19cd6afc77')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('caba6c24-c453-4546-b315-8e19cd6afc77')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e799884c-3e1d-427f-8934-a2b83355c1d9')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e799884c-3e1d-427f-8934-a2b83355c1d9')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e4b0698f-91e7-42be-b660-4f8783f3722d')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e4b0698f-91e7-42be-b660-4f8783f3722d')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '9433aafa-a11f-4b42-9e0b-e5381815a070')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('9433aafa-a11f-4b42-9e0b-e5381815a070')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'cb7fda52-7ef4-4166-ad20-dcef5eb3ce37')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('cb7fda52-7ef4-4166-ad20-dcef5eb3ce37')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd9bf5ab0-8d4b-4241-a43e-0288c7a0c837')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d9bf5ab0-8d4b-4241-a43e-0288c7a0c837')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1b93352a-110f-4e10-b0c7-b3964a83818e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1b93352a-110f-4e10-b0c7-b3964a83818e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '2fb7243b-a208-4540-94cb-d477db4ebf1e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('2fb7243b-a208-4540-94cb-d477db4ebf1e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'dea6269a-dda0-4088-9873-73b18ce57903')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('dea6269a-dda0-4088-9873-73b18ce57903')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '952aa29f-ac70-4314-9f6a-26176bbee27d')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('952aa29f-ac70-4314-9f6a-26176bbee27d')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '3ee8ab57-9ae4-4f13-a5fe-012468467bfe')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('3ee8ab57-9ae4-4f13-a5fe-012468467bfe')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '9d0f9e14-22ec-437f-9826-e74866bc9b4a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('9d0f9e14-22ec-437f-9826-e74866bc9b4a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'a5eae26e-6fdf-4c85-9c5f-78ede17a23af')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('a5eae26e-6fdf-4c85-9c5f-78ede17a23af')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '3d1b2efe-7eff-46b8-85c0-c5b13e2d2333')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('3d1b2efe-7eff-46b8-85c0-c5b13e2d2333')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'cd2a16de-49b9-4ab0-ab0d-fe036206a8a3')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('cd2a16de-49b9-4ab0-ab0d-fe036206a8a3')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '65781212-456b-4894-84a1-13aaf7bb3889')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('65781212-456b-4894-84a1-13aaf7bb3889')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '9572f693-0dec-40eb-abc3-b55d5dbe21fd')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('9572f693-0dec-40eb-abc3-b55d5dbe21fd')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'fcf556ba-6600-40bb-913b-6fb93cd1fb28')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('fcf556ba-6600-40bb-913b-6fb93cd1fb28')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '6e87a8fe-b014-44fd-81f8-c6ee59acc940')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('6e87a8fe-b014-44fd-81f8-c6ee59acc940')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '326d7e35-4346-4a3a-8857-8f2ffd56466c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('326d7e35-4346-4a3a-8857-8f2ffd56466c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'd208c54f-b42e-492f-afad-d42060b5a45e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('d208c54f-b42e-492f-afad-d42060b5a45e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '115af680-b120-4945-82bd-e7a1fcf32849')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('115af680-b120-4945-82bd-e7a1fcf32849')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'edfc1431-3877-43c1-8389-0f70a8270efb')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('edfc1431-3877-43c1-8389-0f70a8270efb')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f453aa19-673a-4a29-814b-007911e1d266')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f453aa19-673a-4a29-814b-007911e1d266')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b76eb1da-c824-4ad0-a401-360f3112d47e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b76eb1da-c824-4ad0-a401-360f3112d47e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8093958b-502b-47bc-a757-6835fd700f16')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8093958b-502b-47bc-a757-6835fd700f16')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '22bda863-83c6-4971-a82a-cb7da3bd8619')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('22bda863-83c6-4971-a82a-cb7da3bd8619')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '6a8798c3-cec6-4f3b-bb05-80f41afd8eca')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('6a8798c3-cec6-4f3b-bb05-80f41afd8eca')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c7a605fc-099e-4fb1-9689-c2fe4c2ceb37')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c7a605fc-099e-4fb1-9689-c2fe4c2ceb37')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5d5785aa-0b4b-4e29-8ccc-71426a928a89')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5d5785aa-0b4b-4e29-8ccc-71426a928a89')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b9394322-6310-4098-bc8d-694d07939a92')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b9394322-6310-4098-bc8d-694d07939a92')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b81a5d0b-6925-414a-be57-48243a353524')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b81a5d0b-6925-414a-be57-48243a353524')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '71f5b126-d107-4856-8a73-bd1bfa83e918')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('71f5b126-d107-4856-8a73-bd1bfa83e918')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'cc2d636b-47fe-488b-a890-ba5a2cde5dcb')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('cc2d636b-47fe-488b-a890-ba5a2cde5dcb')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '15e88a7a-e42a-433e-a09c-8a5e06359a5e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('15e88a7a-e42a-433e-a09c-8a5e06359a5e')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5639de32-6712-4717-b19d-262b1342a3e2')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5639de32-6712-4717-b19d-262b1342a3e2')

GO

GO
BEGIN /* REGION [ EnumGenders ]*/
	DELETE FROM  [sl].EnumGenders
	INSERT INTO  [sl].EnumGenders(GenderId, Name) VALUES
	(0, 'Not Known'),
	(1, 'Male'),
	(2, 'Female'),
	(9, 'Not Applicable')
END

BEGIN /* REGION [ EnumContactInfoTypes ]*/
	DELETE FROM  [sl].EnumContactInfoTypes
	DBCC CHECKIDENT ('[sl].[EnumContactInfoTypes]', RESEED, 1)
	INSERT INTO  [sl].EnumContactInfoTypes(Name) VALUES
	('Phone'),
	('Web'),
	('Email'),
	('Fax'),
	('Place'),
	('Other')
END

BEGIN /* REGION [ EnumSubjectTypes ]*/
	DELETE FROM  [sl].EnumSubjectTypes
	DBCC CHECKIDENT ('[sl].[EnumSubjectTypes]', RESEED, 1)
	INSERT INTO  [sl].EnumSubjectTypes (Name) VALUES
	('Person'),
	('Enterprise')
END

BEGIN /* REGION [ EnumStatuses ]*/
	DELETE FROM  [sl].EnumStatuses
	INSERT INTO  [sl].EnumStatuses (StatusId, Name) VALUES
	(0, 'Inactive'),
	(1, 'Active'),
	(2, 'Removed')
END

BEGIN /* REGION [ EnumListTypes ]*/
	DELETE FROM  [sl].EnumListTypes
	DBCC CHECKIDENT ('[sl].[EnumListTypes]', RESEED, 1)
	INSERT INTO  [sl].EnumListTypes (Name, Description) VALUES
	('EU', 'EU Sanction list'),
	('NL', 'NL Sanction list'),
	('BND','BND Sanction list' )
END

BEGIN /* REGION [ EnumIdentificationTypes ]*/
	DELETE FROM  [sl].EnumIdentificationTypes
	DBCC CHECKIDENT ('[sl].[EnumIdentificationTypes]', RESEED, 1)
	INSERT INTO  [sl].EnumIdentificationTypes(Name, Description) VALUES
	('Passport', 'National passport'),
	('Id','National identification card'), 
	('Ssn','Social Security Number'), 
	('DrivingLicence','Driving licence'), 
	('TravelCardId','Temporary Travel Document'), 
	('RegNumber','Registration Number'), 
	('Other','Other identification number')
END

BEGIN /* REGION [ EnumCountries ]*/
	DELETE FROM  [sl].EnumCountries
	INSERT INTO  [sl].EnumCountries (Iso2, Name, Nicename, Iso3, NumCode, PhoneCode) VALUES
	('AF', 'AFGHANISTAN', 'Afghanistan', 'AFG', 4, 93),
	('AL', 'ALBANIA', 'Albania', 'ALB', 8, 355),
	('DZ', 'ALGERIA', 'Algeria', 'DZA', 12, 213),
	('AS', 'AMERICAN SAMOA', 'American Samoa', 'ASM', 16, 1684),
	('AD', 'ANDORRA', 'Andorra', 'AND', 20, 376),
	('AO', 'ANGOLA', 'Angola', 'AGO', 24, 244),
	('AI', 'ANGUILLA', 'Anguilla', 'AIA', 660, 1264),
	('AQ', 'ANTARCTICA', 'Antarctica', 'ATA', NULL, 0),
	('AG', 'ANTIGUA AND BARBUDA', 'Antigua and Barbuda', 'ATG', 28, 1268),
	('AR', 'ARGENTINA', 'Argentina', 'ARG', 32, 54),
	('AM', 'ARMENIA', 'Armenia', 'ARM', 51, 374),
	('AW', 'ARUBA', 'Aruba', 'ABW', 533, 297),
	('AU', 'AUSTRALIA', 'Australia', 'AUS', 36, 61),
	('AT', 'AUSTRIA', 'Austria', 'AUT', 40, 43),
	('AZ', 'AZERBAIJAN', 'Azerbaijan', 'AZE', 31, 994),
	('BS', 'BAHAMAS', 'Bahamas', 'BHS', 44, 1242),
	('BH', 'BAHRAIN', 'Bahrain', 'BHR', 48, 973),
	('BD', 'BANGLADESH', 'Bangladesh', 'BGD', 50, 880),
	('BB', 'BARBADOS', 'Barbados', 'BRB', 52, 1246),
	('BY', 'BELARUS', 'Belarus', 'BLR', 112, 375),
	('BE', 'BELGIUM', 'Belgium', 'BEL', 56, 32),
	('BZ', 'BELIZE', 'Belize', 'BLZ', 84, 501),
	('BJ', 'BENIN', 'Benin', 'BEN', 204, 229),
	('BM', 'BERMUDA', 'Bermuda', 'BMU', 60, 1441),
	('BT', 'BHUTAN', 'Bhutan', 'BTN', 64, 975),
	('BO', 'BOLIVIA', 'Bolivia', 'BOL', 68, 591),
	('BA', 'BOSNIA AND HERZEGOVINA', 'Bosnia and Herzegovina', 'BIH', 70, 387),
	('BW', 'BOTSWANA', 'Botswana', 'BWA', 72, 267),
	('BV', 'BOUVET ISLAND', 'Bouvet Island', 'BVT', NULL, 0),
	('BR', 'BRAZIL', 'Brazil', 'BRA', 76, 55),
	('IO', 'BRITISH INDIAN OCEAN TERRITORY', 'British Indian Ocean Territory', 'IOT', NULL, 246),
	('BN', 'BRUNEI DARUSSALAM', 'Brunei Darussalam', 'BRN', 96, 673),
	('BG', 'BULGARIA', 'Bulgaria', 'BGR', 100, 359),
	('BF', 'BURKINA FASO', 'Burkina Faso', 'BFA', 854, 226),
	('BI', 'BURUNDI', 'Burundi', 'BDI', 108, 257),
	('KH', 'CAMBODIA', 'Cambodia', 'KHM', 116, 855),
	('CM', 'CAMEROON', 'Cameroon', 'CMR', 120, 237),
	('CA', 'CANADA', 'Canada', 'CAN', 124, 1),
	('CV', 'CAPE VERDE', 'Cape Verde', 'CPV', 132, 238),
	('KY', 'CAYMAN ISLANDS', 'Cayman Islands', 'CYM', 136, 1345),
	('CF', 'CENTRAL AFRICAN REPUBLIC', 'Central African Republic', 'CAF', 140, 236),
	('TD', 'CHAD', 'Chad', 'TCD', 148, 235),
	('CL', 'CHILE', 'Chile', 'CHL', 152, 56),
	('CN', 'CHINA', 'China', 'CHN', 156, 86),
	('CX', 'CHRISTMAS ISLAND', 'Christmas Island', 'CXR', NULL, 61),
	('CC', 'COCOS (KEELING) ISLANDS', 'Cocos (Keeling) Islands', 'CCK', NULL, 672),
	('CO', 'COLOMBIA', 'Colombia', 'COL', 170, 57),
	('KM', 'COMOROS', 'Comoros', 'COM', 174, 269),
	('CG', 'CONGO', 'Congo', 'COG', 178, 242),
	('CD', 'CONGO, THE DEMOCRATIC REPUBLIC OF THE', 'Congo, the Democratic Republic of the', 'COD', 180, 242),
	('CK', 'COOK ISLANDS', 'Cook Islands', 'COK', 184, 682),
	('CR', 'COSTA RICA', 'Costa Rica', 'CRI', 188, 506),
	('CI', 'COTE D''IVOIRE', 'Cote D''Ivoire', 'CIV', 384, 225),
	('HR', 'CROATIA', 'Croatia', 'HRV', 191, 385),
	('CU', 'CUBA', 'Cuba', 'CUB', 192, 53),
	('CY', 'CYPRUS', 'Cyprus', 'CYP', 196, 357),
	('CZ', 'CZECH REPUBLIC', 'Czech Republic', 'CZE', 203, 420),
	('DK', 'DENMARK', 'Denmark', 'DNK', 208, 45),
	('DJ', 'DJIBOUTI', 'Djibouti', 'DJI', 262, 253),
	('DM', 'DOMINICA', 'Dominica', 'DMA', 212, 1767),
	('DO', 'DOMINICAN REPUBLIC', 'Dominican Republic', 'DOM', 214, 1809),
	('EC', 'ECUADOR', 'Ecuador', 'ECU', 218, 593),
	('EG', 'EGYPT', 'Egypt', 'EGY', 818, 20),
	('SV', 'EL SALVADOR', 'El Salvador', 'SLV', 222, 503),
	('GQ', 'EQUATORIAL GUINEA', 'Equatorial Guinea', 'GNQ', 226, 240),
	('ER', 'ERITREA', 'Eritrea', 'ERI', 232, 291),
	('EE', 'ESTONIA', 'Estonia', 'EST', 233, 372),
	('ET', 'ETHIOPIA', 'Ethiopia', 'ETH', 231, 251),
	('FK', 'FALKLAND ISLANDS (MALVINAS)', 'Falkland Islands (Malvinas)', 'FLK', 238, 500),
	('FO', 'FAROE ISLANDS', 'Faroe Islands', 'FRO', 234, 298),
	('FJ', 'FIJI', 'Fiji', 'FJI', 242, 679),
	('FI', 'FINLAND', 'Finland', 'FIN', 246, 358),
	('FR', 'FRANCE', 'France', 'FRA', 250, 33),
	('GF', 'FRENCH GUIANA', 'French Guiana', 'GUF', 254, 594),
	('PF', 'FRENCH POLYNESIA', 'French Polynesia', 'PYF', 258, 689),
	('TF', 'FRENCH SOUTHERN TERRITORIES', 'French Southern Territories', 'ATF', NULL, 0),
	('GA', 'GABON', 'Gabon', 'GAB', 266, 241),
	('GM', 'GAMBIA', 'Gambia', 'GMB', 270, 220),
	('GE', 'GEORGIA', 'Georgia', 'GEO', 268, 995),
	('DE', 'GERMANY', 'Germany', 'DEU', 276, 49),
	('GH', 'GHANA', 'Ghana', 'GHA', 288, 233),
	('GI', 'GIBRALTAR', 'Gibraltar', 'GIB', 292, 350),
	('GR', 'GREECE', 'Greece', 'GRC', 300, 30),
	('GL', 'GREENLAND', 'Greenland', 'GRL', 304, 299),
	('GD', 'GRENADA', 'Grenada', 'GRD', 308, 1473),
	('GP', 'GUADELOUPE', 'Guadeloupe', 'GLP', 312, 590),
	('GU', 'GUAM', 'Guam', 'GUM', 316, 1671),
	('GT', 'GUATEMALA', 'Guatemala', 'GTM', 320, 502),
	('GN', 'GUINEA', 'Guinea', 'GIN', 324, 224),
	('GW', 'GUINEA-BISSAU', 'Guinea-Bissau', 'GNB', 624, 245),
	('GY', 'GUYANA', 'Guyana', 'GUY', 328, 592),
	('HT', 'HAITI', 'Haiti', 'HTI', 332, 509),
	('HM', 'HEARD ISLAND AND MCDONALD ISLANDS', 'Heard Island and Mcdonald Islands', 'HMD', NULL, 0),
	('VA', 'HOLY SEE (VATICAN CITY STATE)', 'Holy See (Vatican City State)', 'VAT', 336, 39),
	('HN', 'HONDURAS', 'Honduras', 'HND', 340, 504),
	('HK', 'HONG KONG', 'Hong Kong', 'HKG', 344, 852),
	('HU', 'HUNGARY', 'Hungary', 'HUN', 348, 36),
	('IS', 'ICELAND', 'Iceland', 'ISL', 352, 354),
	('IN', 'INDIA', 'India', 'IND', 356, 91),
	('ID', 'INDONESIA', 'Indonesia', 'IDN', 360, 62),
	('IR', 'IRAN, ISLAMIC REPUBLIC OF', 'Iran, Islamic Republic of', 'IRN', 364, 98),
	('IQ', 'IRAQ', 'Iraq', 'IRQ', 368, 964),
	('IE', 'IRELAND', 'Ireland', 'IRL', 372, 353),
	('IL', 'ISRAEL', 'Israel', 'ISR', 376, 972),
	('IT', 'ITALY', 'Italy', 'ITA', 380, 39),
	('JM', 'JAMAICA', 'Jamaica', 'JAM', 388, 1876),
	('JP', 'JAPAN', 'Japan', 'JPN', 392, 81),
	('JO', 'JORDAN', 'Jordan', 'JOR', 400, 962),
	('KZ', 'KAZAKHSTAN', 'Kazakhstan', 'KAZ', 398, 7),
	('KE', 'KENYA', 'Kenya', 'KEN', 404, 254),
	('KI', 'KIRIBATI', 'Kiribati', 'KIR', 296, 686),
	('KP', 'KOREA, DEMOCRATIC PEOPLE''S REPUBLIC OF', 'Korea, Democratic People''s Republic of', 'PRK', 408, 850),
	('KR', 'KOREA, REPUBLIC OF', 'Korea, Republic of', 'KOR', 410, 82),
	('KW', 'KUWAIT', 'Kuwait', 'KWT', 414, 965),
	('KG', 'KYRGYZSTAN', 'Kyrgyzstan', 'KGZ', 417, 996),
	('LA', 'LAO PEOPLE''S DEMOCRATIC REPUBLIC', 'Lao People''s Democratic Republic', 'LAO', 418, 856),
	('LV', 'LATVIA', 'Latvia', 'LVA', 428, 371),
	('LB', 'LEBANON', 'Lebanon', 'LBN', 422, 961),
	('LS', 'LESOTHO', 'Lesotho', 'LSO', 426, 266),
	('LR', 'LIBERIA', 'Liberia', 'LBR', 430, 231),
	('LY', 'LIBYAN ARAB JAMAHIRIYA', 'Libyan Arab Jamahiriya', 'LBY', 434, 218),
	('LI', 'LIECHTENSTEIN', 'Liechtenstein', 'LIE', 438, 423),
	('LT', 'LITHUANIA', 'Lithuania', 'LTU', 440, 370),
	('LU', 'LUXEMBOURG', 'Luxembourg', 'LUX', 442, 352),
	('MO', 'MACAO', 'Macao', 'MAC', 446, 853),
	('MK', 'MACEDONIA, THE FORMER YUGOSLAV REPUBLIC OF', 'Macedonia, the Former Yugoslav Republic of', 'MKD', 807, 389),
	('MG', 'MADAGASCAR', 'Madagascar', 'MDG', 450, 261),
	('MW', 'MALAWI', 'Malawi', 'MWI', 454, 265),
	('MY', 'MALAYSIA', 'Malaysia', 'MYS', 458, 60),
	('MV', 'MALDIVES', 'Maldives', 'MDV', 462, 960),
	('ML', 'MALI', 'Mali', 'MLI', 466, 223),
	('MT', 'MALTA', 'Malta', 'MLT', 470, 356),
	('MH', 'MARSHALL ISLANDS', 'Marshall Islands', 'MHL', 584, 692),
	('MQ', 'MARTINIQUE', 'Martinique', 'MTQ', 474, 596),
	('MR', 'MAURITANIA', 'Mauritania', 'MRT', 478, 222),
	('MU', 'MAURITIUS', 'Mauritius', 'MUS', 480, 230),
	('YT', 'MAYOTTE', 'Mayotte', 'MYT', NULL, 269),
	('MX', 'MEXICO', 'Mexico', 'MEX', 484, 52),
	('FM', 'MICRONESIA, FEDERATED STATES OF', 'Micronesia, Federated States of', 'FSM', 583, 691),
	('MD', 'MOLDOVA, REPUBLIC OF', 'Moldova, Republic of', 'MDA', 498, 373),
	('MC', 'MONACO', 'Monaco', 'MCO', 492, 377),
	('MN', 'MONGOLIA', 'Mongolia', 'MNG', 496, 976),
	('MS', 'MONTSERRAT', 'Montserrat', 'MSR', 500, 1664),
	('MA', 'MOROCCO', 'Morocco', 'MAR', 504, 212),
	('MZ', 'MOZAMBIQUE', 'Mozambique', 'MOZ', 508, 258),
	('MM', 'MYANMAR', 'Myanmar', 'MMR', 104, 95),
	('NA', 'NAMIBIA', 'Namibia', 'NAM', 516, 264),
	('NR', 'NAURU', 'Nauru', 'NRU', 520, 674),
	('NP', 'NEPAL', 'Nepal', 'NPL', 524, 977),
	('NL', 'NETHERLANDS', 'Netherlands', 'NLD', 528, 31),
	('AN', 'NETHERLANDS ANTILLES', 'Netherlands Antilles', 'ANT', 530, 599),
	('NC', 'NEW CALEDONIA', 'New Caledonia', 'NCL', 540, 687),
	('NZ', 'NEW ZEALAND', 'New Zealand', 'NZL', 554, 64),
	('NI', 'NICARAGUA', 'Nicaragua', 'NIC', 558, 505),
	('NE', 'NIGER', 'Niger', 'NER', 562, 227),
	('NG', 'NIGERIA', 'Nigeria', 'NGA', 566, 234),
	('NU', 'NIUE', 'Niue', 'NIU', 570, 683),
	('NF', 'NORFOLK ISLAND', 'Norfolk Island', 'NFK', 574, 672),
	('MP', 'NORTHERN MARIANA ISLANDS', 'Northern Mariana Islands', 'MNP', 580, 1670),
	('NO', 'NORWAY', 'Norway', 'NOR', 578, 47),
	('OM', 'OMAN', 'Oman', 'OMN', 512, 968),
	('PK', 'PAKISTAN', 'Pakistan', 'PAK', 586, 92),
	('PW', 'PALAU', 'Palau', 'PLW', 585, 680),
	('PS', 'PALESTINIAN TERRITORY, OCCUPIED', 'Palestinian Territory, Occupied', 'PSE', NULL, 970),
	('PA', 'PANAMA', 'Panama', 'PAN', 591, 507),
	('PG', 'PAPUA NEW GUINEA', 'Papua New Guinea', 'PNG', 598, 675),
	('PY', 'PARAGUAY', 'Paraguay', 'PRY', 600, 595),
	('PE', 'PERU', 'Peru', 'PER', 604, 51),
	('PH', 'PHILIPPINES', 'Philippines', 'PHL', 608, 63),
	('PN', 'PITCAIRN', 'Pitcairn', 'PCN', 612, 0),
	('PL', 'POLAND', 'Poland', 'POL', 616, 48),
	('PT', 'PORTUGAL', 'Portugal', 'PRT', 620, 351),
	('PR', 'PUERTO RICO', 'Puerto Rico', 'PRI', 630, 1787),
	('QA', 'QATAR', 'Qatar', 'QAT', 634, 974),
	('RE', 'REUNION', 'Reunion', 'REU', 638, 262),
	('RO', 'ROMANIA', 'Romania', 'ROM', 642, 40),
	('RU', 'RUSSIAN FEDERATION', 'Russian Federation', 'RUS', 643, 70),
	('RW', 'RWANDA', 'Rwanda', 'RWA', 646, 250),
	('SH', 'SAINT HELENA', 'Saint Helena', 'SHN', 654, 290),
	('KN', 'SAINT KITTS AND NEVIS', 'Saint Kitts and Nevis', 'KNA', 659, 1869),
	('LC', 'SAINT LUCIA', 'Saint Lucia', 'LCA', 662, 1758),
	('PM', 'SAINT PIERRE AND MIQUELON', 'Saint Pierre and Miquelon', 'SPM', 666, 508),
	('VC', 'SAINT VINCENT AND THE GRENADINES', 'Saint Vincent and the Grenadines', 'VCT', 670, 1784),
	('WS', 'SAMOA', 'Samoa', 'WSM', 882, 684),
	('SM', 'SAN MARINO', 'San Marino', 'SMR', 674, 378),
	('ST', 'SAO TOME AND PRINCIPE', 'Sao Tome and Principe', 'STP', 678, 239),
	('SA', 'SAUDI ARABIA', 'Saudi Arabia', 'SAU', 682, 966),
	('SN', 'SENEGAL', 'Senegal', 'SEN', 686, 221),
	('CS', 'SERBIA AND MONTENEGRO', 'Serbia and Montenegro', 'SRB', NULL, 381),
	('SC', 'SEYCHELLES', 'Seychelles', 'SYC', 690, 248),
	('SL', 'SIERRA LEONE', 'Sierra Leone', 'SLE', 694, 232),
	('SG', 'SINGAPORE', 'Singapore', 'SGP', 702, 65),
	('SK', 'SLOVAKIA', 'Slovakia', 'SVK', 703, 421),
	('SI', 'SLOVENIA', 'Slovenia', 'SVN', 705, 386),
	('SB', 'SOLOMON ISLANDS', 'Solomon Islands', 'SLB', 90, 677),
	('SO', 'SOMALIA', 'Somalia', 'SOM', 706, 252),
	('ZA', 'SOUTH AFRICA', 'South Africa', 'ZAF', 710, 27),
	('GS', 'SOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDS', 'South Georgia and the South Sandwich Islands', 'SGS', NULL, 0),
	('ES', 'SPAIN', 'Spain', 'ESP', 724, 34),
	('LK', 'SRI LANKA', 'Sri Lanka', 'LKA', 144, 94),
	('SD', 'SUDAN', 'Sudan', 'SDN', 736, 249),
	('SR', 'SURINAME', 'Suriname', 'SUR', 740, 597),
	('SJ', 'SVALBARD AND JAN MAYEN', 'Svalbard and Jan Mayen', 'SJM', 744, 47),
	('SZ', 'SWAZILAND', 'Swaziland', 'SWZ', 748, 268),
	('SE', 'SWEDEN', 'Sweden', 'SWE', 752, 46),
	('CH', 'SWITZERLAND', 'Switzerland', 'CHE', 756, 41),
	('SY', 'SYRIAN ARAB REPUBLIC', 'Syrian Arab Republic', 'SYR', 760, 963),
	('TW', 'TAIWAN, PROVINCE OF CHINA', 'Taiwan, Province of China', 'TWN', 158, 886),
	('TJ', 'TAJIKISTAN', 'Tajikistan', 'TJK', 762, 992),
	('TZ', 'TANZANIA, UNITED REPUBLIC OF', 'Tanzania, United Republic of', 'TZA', 834, 255),
	('TH', 'THAILAND', 'Thailand', 'THA', 764, 66),
	('TL', 'TIMOR-LESTE', 'Timor-Leste', 'TLS', NULL, 670),
	('TG', 'TOGO', 'Togo', 'TGO', 768, 228),
	('TK', 'TOKELAU', 'Tokelau', 'TKL', 772, 690),
	('TO', 'TONGA', 'Tonga', 'TON', 776, 676),
	('TT', 'TRINIDAD AND TOBAGO', 'Trinidad and Tobago', 'TTO', 780, 1868),
	('TN', 'TUNISIA', 'Tunisia', 'TUN', 788, 216),
	('TR', 'TURKEY', 'Turkey', 'TUR', 792, 90),
	('TM', 'TURKMENISTAN', 'Turkmenistan', 'TKM', 795, 7370),
	('TC', 'TURKS AND CAICOS ISLANDS', 'Turks and Caicos Islands', 'TCA', 796, 1649),
	('TV', 'TUVALU', 'Tuvalu', 'TUV', 798, 688),
	('UG', 'UGANDA', 'Uganda', 'UGA', 800, 256),
	('UA', 'UKRAINE', 'Ukraine', 'UKR', 804, 380),
	('AE', 'UNITED ARAB EMIRATES', 'United Arab Emirates', 'ARE', 784, 971),
	('GB', 'UNITED KINGDOM', 'United Kingdom', 'GBR', 826, 44),
	('US', 'UNITED STATES', 'United States', 'USA', 840, 1),
	('UM', 'UNITED STATES MINOR OUTLYING ISLANDS', 'United States Minor Outlying Islands', 'UMI', NULL, 1),
	('UY', 'URUGUAY', 'Uruguay', 'URY', 858, 598),
	('UZ', 'UZBEKISTAN', 'Uzbekistan', 'UZB', 860, 998),
	('VU', 'VANUATU', 'Vanuatu', 'VUT', 548, 678),
	('VE', 'VENEZUELA', 'Venezuela', 'VEN', 862, 58),
	('VN', 'VIET NAM', 'Viet Nam', 'VNM', 704, 84),
	('VG', 'VIRGIN ISLANDS, BRITISH', 'Virgin Islands, British', 'VGB', 92, 1284),
	('VI', 'VIRGIN ISLANDS, U.S.', 'Virgin Islands, U.s.', 'VIR', 850, 1340),
	('WF', 'WALLIS AND FUTUNA', 'Wallis and Futuna', 'WLF', 876, 681),
	('EH', 'WESTERN SAHARA', 'Western Sahara', 'ESH', 732, 212),
	('YE', 'YEMEN', 'Yemen', 'YEM', 887, 967),
	('ZM', 'ZAMBIA', 'Zambia', 'ZMB', 894, 260),
	('ZW', 'ZIMBABWE', 'Zimbabwe', 'ZWE', 716, 263);
END

BEGIN /* REGION [ EnumLanguages ]*/
	DELETE FROM  [sl].EnumLanguages
	INSERT INTO  [sl].EnumLanguages (Iso3, Iso2, Name) VALUES
	('AAR','AA','Afar'),
	('ABK','AB','Abkhazian'),
	('AFR','AF','Afrikaans'),
	('AKA','AK','Akan'),
	('ALB','SQ','Albanian'),
	('AMH','AM','Amharic'),
	('ARA','AR','Arabic'),
	('ARG','AN','Aragonese'),
	('ARM','HY','Armenian'),
	('ASM','AS','Assamese'),
	('AVA','AV','Avaric'),
	('AVE','AE','Avestan'),
	('AYM','AY','Aymara'),
	('AZE','AZ','Azerbaijani'),
	('BAK','BA','Bashkir'),
	('BAM','BM','Bambara'),
	('BAQ','EU','Basque'),
	('BEL','BE','Belarusian'),
	('BEN','BN','Bengali'),
	('BIH','BH','Bihari languages'),
	('BIS','BI','Bislama'),
	('BOS','BS','Bosnian'),
	('BRE','BR','Breton'),
	('BUL','BG','Bulgarian'),
	('BUR','MY','Burmese'),
	('CAT','CA','Catalan; Valencian'),
	('CHA','CH','Chamorro'),
	('CHE','CE','Chechen'),
	('CHI','ZH','Chinese'),
	('CHU','CU','Church Slavic; Old Slavonic; Church Slavonic; Old Bulgarian; Old Church Slavonic'),
	('CHV','CV','Chuvash'),
	('COR','KW','Cornish'),
	('COS','CO','Corsican'),
	('CRE','CR','Cree'),
	('CZE','CS','Czech'),
	('DAN','DA','Danish'),
	('DIV','DV','Divehi; Dhivehi; Maldivian'),
	('DUT','NL','Dutch; Flemish'),
	('DZO','DZ','Dzongkha'),
	('ENG','EN','English'),
	('EPO','EO','Esperanto'),
	('EST','ET','Estonian'),
	('EWE','EE','Ewe'),
	('FAO','FO','Faroese'),
	('FIJ','FJ','Fijian'),
	('FIN','FI','Finnish'),
	('FRE','FR','French'),
	('FRY','FY','Western Frisian'),
	('FUL','FF','Fulah'),
	('GEO','KA','Georgian'),
	('GER','DE','German'),
	('GLA','GD','Gaelic; Scottish Gaelic'),
	('GLE','GA','Irish'),
	('GLG','GL','Galician'),
	('GLV','GV','Manx'),
	('GRE','EL','Greek, Modern (1453-)'),
	('GRN','GN','Guarani'),
	('GUJ','GU','Gujarati'),
	('HAT','HT','Haitian; Haitian Creole'),
	('HAU','HA','Hausa'),
	('HEB','HE','Hebrew'),
	('HER','HZ','Herero'),
	('HIN','HI','Hindi'),
	('HMO','HO','Hiri Motu'),
	('HRV','HR','Croatian'),
	('HUN','HU','Hungarian'),
	('IBO','IG','Igbo'),
	('ICE','IS','Icelandic'),
	('IDO','IO','Ido'),
	('III','II','Sichuan Yi; Nuosu'),
	('IKU','IU','Inuktitut'),
	('ILE','IE','Interlingue; Occidental'),
	('INA','IA','Interlingua (International Auxiliary Language Association)'),
	('IND','ID','Indonesian'),
	('IPK','IK','Inupiaq'),
	('ITA','IT','Italian'),
	('JAV','JV','Javanese'),
	('JPN','JA','Japanese'),
	('KAL','KL','Kalaallisut; Greenlandic'),
	('KAN','KN','Kannada'),
	('KAS','KS','Kashmiri'),
	('KAU','KR','Kanuri'),
	('KAZ','KK','Kazakh'),
	('KHM','KM','Central Khmer'),
	('KIK','KI','Kikuyu; Gikuyu'),
	('KIN','RW','Kinyarwanda'),
	('KIR','KY','Kirghiz; Kyrgyz'),
	('KOM','KV','Komi'),
	('KON','KG','Kongo'),
	('KOR','KO','Korean'),
	('KUA','KJ','Kuanyama; Kwanyama'),
	('KUR','KU','Kurdish'),
	('LAO','LO','Lao'),
	('LAT','LA','Latin'),
	('LAV','LV','Latvian'),
	('LIM','LI','Limburgan; Limburger; Limburgish'),
	('LIN','LN','Lingala'),
	('LIT','LT','Lithuanian'),
	('LTZ','LB','Luxembourgish; Letzeburgesch'),
	('LUB','LU','Luba-Katanga'),
	('LUG','LG','Ganda'),
	('MAC','MK','Macedonian'),
	('MAH','MH','Marshallese'),
	('MAL','ML','Malayalam'),
	('MAO','MI','Maori'),
	('MAR','MR','Marathi'),
	('MAY','MS','Malay'),
	('MLG','MG','Malagasy'),
	('MLT','MT','Maltese'),
	('MON','MN','Mongolian'),
	('NAU','NA','Nauru'),
	('NAV','NV','Navajo; Navaho'),
	('NBL','NR','Ndebele, South; South Ndebele'),
	('NDE','ND','Ndebele, North; North Ndebele'),
	('NDO','NG','Ndonga'),
	('NEP','NE','Nepali'),
	('NNO','NN','Norwegian Nynorsk; Nynorsk, Norwegian'),
	('NOB','NB','Bokmål, Norwegian; Norwegian Bokmål'),
	('NOR','NO','Norwegian'),
	('NYA','NY','Chichewa; Chewa; Nyanja'),
	('OCI','OC','Occitan (post 1500); Provençal'),
	('OJI','OJ','Ojibwa'),
	('ORI','OR','Oriya'),
	('ORM','OM','Oromo'),
	('OSS','OS','Ossetian; Ossetic'),
	('PAN','PA','Panjabi; Punjabi'),
	('PER','FA','Persian'),
	('PLI','PI','Pali'),
	('POL','PL','Polish'),
	('POR','PT','Portuguese'),
	('PUS','PS','Pushto; Pashto'),
	('QUE','QU','Quechua'),
	('ROH','RM','Romansh'),
	('RUM','RO','Romanian; Moldavian; Moldovan'),
	('RUN','RN','Rundi'),
	('RUS','RU','Russian'),
	('SAG','SG','Sango'),
	('SAN','SA','Sanskrit'),
	('SIN','SI','Sinhala; Sinhalese'),
	('SLO','SK','Slovak'),
	('SLV','SL','Slovenian'),
	('SME','SE','Northern Sami'),
	('SMO','SM','Samoan'),
	('SNA','SN','Shona'),
	('SND','SD','Sindhi'),
	('SOM','SO','Somali'),
	('SOT','ST','Sotho, Southern'),
	('SPA','ES','Spanish; Castilian'),
	('SRD','SC','Sardinian'),
	('SRP','SR','Serbian'),
	('SSW','SS','Swati'),
	('SUN','SU','Sundanese'),
	('SWA','SW','Swahili'),
	('SWE','SV','Swedish'),
	('TAH','TY','Tahitian'),
	('TAM','TA','Tamil'),
	('TAT','TT','Tatar'),
	('TEL','TE','Telugu'),
	('TGK','TG','Tajik'),
	('TGL','TL','Tagalog'),
	('THA','TH','Thai'),
	('TIB','BO','Tibetan'),
	('TIR','TI','Tigrinya'),
	('TON','TO','Tonga (Tonga Islands)'),
	('TSN','TN','Tswana'),
	('TSO','TS','Tsonga'),
	('TUK','TK','Turkmen'),
	('TUR','TR','Turkish'),
	('TWI','TW','Twi'),
	('UIG','UG','Uighur; Uyghur'),
	('UKR','UK','Ukrainian'),
	('URD','UR','Urdu'),
	('UZB','UZ','Uzbek'),
	('VEN','VE','Venda'),
	('VIE','VI','Vietnamese'),
	('VOL','VO','Volapük'),
	('WEL','CY','Welsh'),
	('WLN','WA','Walloon'),
	('WOL','WO','Wolof'),
	('XHO','XH','Xhosa'),
	('YID','YI','Yiddish'),
	('YOR','YO','Yoruba'),
	('ZHA','ZA','Zhuang; Chuang'),
	('ZUL','ZU','Zulu')
END
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.';


GO
