using BND.Services.Payments.iDeal.iDealClients.Base;
using BND.Services.Payments.iDeal.Models;
using System;
using System.Globalization;
using System.Xml.Linq;

namespace BND.Services.Payments.iDeal.iDealClients.Status
{
    /// <summary>
    /// Class StatusResponse is a response for status of transaction.
    /// </summary>
    public class StatusResponse : iDealResponseBase
    {
        #region [Properties]
        /// <summary>
        /// Acquirer id (first four digits) + unique id generated by acquirer (last 12 digits)
        /// </summary>
        /// <value>The transaction identifier.</value>
        public string TransactionId { get; private set; }
        /// <summary>
        /// Indicates whether the transaction has been successful or one of the following statuses: 
        /// Success: Positive result; the payment is guaranteed.
        /// Cancelled: Negative result due to cancellation by Consumer; no payment has been made.
        /// Expired: Negative result due to expirationof the transaction; no payment has been made.
        /// Failure: Negative result due to other reasons; no payment has been made.
        /// Open: Final result not yet known). A new status requestis necessary to obtain the status.
        /// </summary>
        public string Status { get; private set; }
        /// <summary>
        /// If Status = Success, Cancelled, Expired or Failure 
        /// This is the date and time at which the Issuer established the Transaction.status for this transaction and recorded it as part of the 
        /// transaction details.
        /// </summary>
        public DateTime? StatusDate { get; set; }
        /// <summary>
        /// Only included if Status = SuccessName of the Consumer according to the name of the account used for payment.In the exceptional case that 
        /// the consumerName cannot be retrieved by the Issuer, this is filled with ‘N/A’. If governing law prevents Issuers outside the Netherlands
        /// from disclosing this information, field may be omitted.
        /// </summary>
        public string ConsumerName { get; private set; }
        /// <summary>
        /// Only included if Status = Success
        /// The IBAN of the Consumer Bank account used for payment. If governing law prevents Issuersoutside the
        /// Netherlands from disclosing this information, field may be omitted.
        /// </summary>
        /// <value>The consumer iban.</value>
        public string ConsumerIBAN { get; private set; }
        /// <summary>
        /// Only included if Status = Success
        /// BIC of the bank where the Consumer account is held.If governing law prevents Issuers outside the
        /// Netherlands from disclosing this information, field may be omitted.
        /// </summary>
        public string ConsumerBIC { get; private set; }
        /// <summary>
        /// Only included if Status = Success
        /// The amount in euro guaranteed by the Acquirer to the Merchant (including decimal separator). The Merchant should verify that the value
        /// is equal to the value of amount in the TransactionRequest
        /// </summary>
        public decimal Amount { get; set; }
        /// <summary>
        /// Only included if Status = Success
        /// Currency of the amount guaranteed, expressed using the three-letter international currency code as per ISO 4217; Since iDEAL only
        /// supports Euro payments at this moment, the value should always be ‘EUR’.
        /// </summary>
        public string Currency { get; set; }
        /// <summary>
        /// Thumbprint of public certificate
        /// </summary>
        /// <value>The fingerprint.</value>
        public string Fingerprint { get; private set; }
        /// <summary>
        /// Digital signature provided by the bank/acceptant
        /// </summary>
        public string SignatureValue { get; private set; }
        #endregion


        #region [Constructor]
        /// <summary>
        /// Initializes a new instance of the <see cref="StatusResponse"/> class.
        /// </summary>
        /// <param name="xmlStatusResponse">The XML status response.</param>
        /// <exception cref="System.NotSupportedException">Received unknown status</exception>
        public StatusResponse(string xmlStatusResponse)
        {
            // Parse document
            var xDocument = XElement.Parse(xmlStatusResponse);
            XNamespace xmlNamespace = Properties.Resources.XML_NAMESPACE;
            XNamespace xmlNamespaceSignature = Properties.Resources.XML_SIGNATURE;

            // Create datetimestamp
            CreateDateTimeStamp = Convert.ToDateTime(xDocument.Element(xmlNamespace + "createDateTimestamp").Value);

            // Acquirer id
            AcquirerId = (int)xDocument.Element(xmlNamespace + "Acquirer").Element(xmlNamespace + "acquirerID");

            // TransactionId
            TransactionId = xDocument.Element(xmlNamespace + "Transaction").Element(xmlNamespace + "transactionID").Value;

            // Status
            Status = xDocument.Element(xmlNamespace + "Transaction").Element(xmlNamespace + "status").Value;
            // check status will not exists these
            if (!Enum.IsDefined(typeof(EnumQueryStatus), Status))
            {
                throw new NotSupportedException(string.Format("Does not support this status({0}).", Status));
            }

            if (Status != EnumQueryStatus.Open.ToString())
            {
                // Status date
                StatusDate = Convert.ToDateTime(xDocument.Element(xmlNamespace + "Transaction").Element(xmlNamespace + "statusDateTimestamp").Value);

                if (Status == EnumQueryStatus.Success.ToString())
                {
                    // Consumer name
                    ConsumerName = xDocument.Element(xmlNamespace + "Transaction").Element(xmlNamespace + "consumerName").Value;

                    // Consumer IBAN
                    ConsumerIBAN = xDocument.Element(xmlNamespace + "Transaction").Element(xmlNamespace + "consumerIBAN").Value;

                    // Consumer BIC
                    ConsumerBIC = xDocument.Element(xmlNamespace + "Transaction").Element(xmlNamespace + "consumerBIC").Value;

                    // Amount
                    string amount = xDocument.Element(xmlNamespace + "Transaction").Element(xmlNamespace + "amount").Value;
                    Amount = (String.IsNullOrEmpty(amount)) ? 0 : Convert.ToDecimal(amount, new CultureInfo("en-US"));

                    // Currency
                    Currency = xDocument.Element(xmlNamespace + "Transaction").Element(xmlNamespace + "currency").Value;
                }
            }


            // Signature value
            SignatureValue = xDocument.Element(xmlNamespaceSignature + "Signature").Element(xmlNamespaceSignature + "SignatureValue").Value;

            // Fingerprint
            Fingerprint = xDocument.Element(xmlNamespaceSignature + "Signature").Element(xmlNamespaceSignature + "KeyInfo")
                                   .Element(xmlNamespaceSignature + "KeyName").Value;

        }
        #endregion
    }
}