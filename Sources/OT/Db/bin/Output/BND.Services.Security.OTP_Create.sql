/*
Deployment script for BND.Services.Security.OTP.Db

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "BND.Services.Security.OTP.Db"
:setvar DefaultFilePrefix "BND.Services.Security.OTP.Db"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [Otp_Role]...';


GO
CREATE ROLE [Otp_Role]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [otp]...';


GO
CREATE SCHEMA [otp]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [otp].[Account]...';


GO
CREATE TABLE [otp].[Account] (
    [AccountId]   UNIQUEIDENTIFIER NOT NULL,
    [ApiKey]      VARCHAR (128)    NOT NULL,
    [Name]        VARCHAR (64)     NOT NULL,
    [IpAddress]   VARCHAR (64)     NOT NULL,
    [IsActive]    BIT              NOT NULL,
    [Description] TEXT             NULL,
    [Salt]        CHAR (16)        NOT NULL,
    [Email]       VARCHAR (256)    NOT NULL,
    PRIMARY KEY CLUSTERED ([AccountId] ASC)
);


GO
PRINT N'Creating [otp].[Setting]...';


GO
CREATE TABLE [otp].[Setting] (
    [Key]   VARCHAR (16) NOT NULL,
    [Value] VARCHAR (32) NOT NULL,
    PRIMARY KEY CLUSTERED ([Key] ASC)
);


GO
PRINT N'Creating [otp].[OneTimePassword]...';


GO
CREATE TABLE [otp].[OneTimePassword] (
    [OtpId]          VARCHAR (128)    NOT NULL,
    [AccountId]      UNIQUEIDENTIFIER NOT NULL,
    [Suid]           VARCHAR (128)    NOT NULL,
    [ChannelType]    VARCHAR (16)     NOT NULL,
    [ChannelSender]  VARCHAR (64)     NOT NULL,
    [ChannelAddress] VARCHAR (256)    NOT NULL,
    [ChannelMessage] VARCHAR (MAX)    NOT NULL,
    [ExpiryDate]     DATETIME         NOT NULL,
    [Payload]        VARCHAR (MAX)    NULL,
    [RefCode]        VARCHAR (8)      NULL,
    [Code]           VARCHAR (8)      NOT NULL,
    [Status]         VARCHAR (16)     NOT NULL,
    PRIMARY KEY CLUSTERED ([OtpId] ASC)
);


GO
PRINT N'Creating [otp].[Log]...';


GO
CREATE TABLE [otp].[Log] (
    [LogId]          INT           IDENTITY (1, 1) NOT NULL,
    [Prival]         TINYINT       NOT NULL,
    [Version]        TINYINT       NOT NULL,
    [Timestamp]      DATETIME2 (7) NOT NULL,
    [Hostname]       VARCHAR (255) NULL,
    [AppName]        VARCHAR (48)  NULL,
    [ProcId]         VARCHAR (128) NULL,
    [MsgId]          VARCHAR (32)  NULL,
    [StructuredData] VARCHAR (MAX) NULL,
    [Msg]            VARCHAR (MAX) NULL,
    PRIMARY KEY CLUSTERED ([LogId] ASC)
);


GO
PRINT N'Creating [otp].[EnumStatus]...';


GO
CREATE TABLE [otp].[EnumStatus] (
    [Status]      VARCHAR (16) NOT NULL,
    [Description] TEXT         NULL,
    PRIMARY KEY CLUSTERED ([Status] ASC)
);


GO
PRINT N'Creating [otp].[EnumChannelType]...';


GO
CREATE TABLE [otp].[EnumChannelType] (
    [ChannelType] VARCHAR (16) NOT NULL,
    [Name]        VARCHAR (64) NOT NULL,
    PRIMARY KEY CLUSTERED ([ChannelType] ASC)
);


GO
PRINT N'Creating [otp].[Attempt]...';


GO
CREATE TABLE [otp].[Attempt] (
    [AttemptId] INT           IDENTITY (1, 1) NOT NULL,
    [OtpId]     VARCHAR (128) NOT NULL,
    [Date]      DATETIME2 (7) NOT NULL,
    [IpAddress] VARCHAR (64)  NOT NULL,
    [UserAgent] VARCHAR (512) NOT NULL,
    PRIMARY KEY CLUSTERED ([AttemptId] ASC)
);


GO
PRINT N'Creating unnamed constraint on [otp].[Account]...';


GO
ALTER TABLE [otp].[Account]
    ADD DEFAULT NEWID() FOR [AccountId];


GO
PRINT N'Creating unnamed constraint on [otp].[Log]...';


GO
ALTER TABLE [otp].[Log]
    ADD DEFAULT getDate() FOR [Timestamp];


GO
PRINT N'Creating [otp].[FK_OneTimePassword_ToEnumChannelType]...';


GO
ALTER TABLE [otp].[OneTimePassword]
    ADD CONSTRAINT [FK_OneTimePassword_ToEnumChannelType] FOREIGN KEY ([ChannelType]) REFERENCES [otp].[EnumChannelType] ([ChannelType]);


GO
PRINT N'Creating [otp].[FK_OneTimePassword_ToEnumStatus]...';


GO
ALTER TABLE [otp].[OneTimePassword]
    ADD CONSTRAINT [FK_OneTimePassword_ToEnumStatus] FOREIGN KEY ([Status]) REFERENCES [otp].[EnumStatus] ([Status]);


GO
PRINT N'Creating [otp].[FK_OneTimePassword_ToSystem]...';


GO
ALTER TABLE [otp].[OneTimePassword]
    ADD CONSTRAINT [FK_OneTimePassword_ToSystem] FOREIGN KEY ([AccountId]) REFERENCES [otp].[Account] ([AccountId]);


GO
PRINT N'Creating [otp].[FK_Attempt_ToOneTimePassword]...';


GO
ALTER TABLE [otp].[Attempt]
    ADD CONSTRAINT [FK_Attempt_ToOneTimePassword] FOREIGN KEY ([OtpId]) REFERENCES [otp].[OneTimePassword] ([OtpId]);


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[otp].[Account] TO [Otp_Role];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[otp].[Account] TO [Otp_Role];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[otp].[Account] TO [Otp_Role];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[otp].[Setting] TO [Otp_Role];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[otp].[Setting] TO [Otp_Role];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[otp].[Setting] TO [Otp_Role];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[otp].[Setting] TO [Otp_Role];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[otp].[OneTimePassword] TO [Otp_Role];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[otp].[OneTimePassword] TO [Otp_Role];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[otp].[OneTimePassword] TO [Otp_Role];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[otp].[Log] TO [Otp_Role];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[otp].[Log] TO [Otp_Role];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[otp].[Log] TO [Otp_Role];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[otp].[EnumStatus] TO [Otp_Role];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[otp].[EnumStatus] TO [Otp_Role];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[otp].[EnumStatus] TO [Otp_Role];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[otp].[EnumStatus] TO [Otp_Role];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[otp].[EnumChannelType] TO [Otp_Role];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[otp].[EnumChannelType] TO [Otp_Role];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[otp].[EnumChannelType] TO [Otp_Role];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[otp].[EnumChannelType] TO [Otp_Role];


GO
PRINT N'Creating Permission...';


GO
GRANT INSERT
    ON OBJECT::[otp].[Attempt] TO [Otp_Role];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT
    ON OBJECT::[otp].[Attempt] TO [Otp_Role];


GO
PRINT N'Creating Permission...';


GO
GRANT UPDATE
    ON OBJECT::[otp].[Attempt] TO [Otp_Role];


GO
PRINT N'Creating Permission...';


GO
GRANT DELETE
    ON OBJECT::[otp].[Attempt] TO [Otp_Role];


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '08af1f98-4146-4a80-a879-14aa39136668')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('08af1f98-4146-4a80-a879-14aa39136668')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'dc46e594-58bf-41d9-b165-0e032b09c9b4')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('dc46e594-58bf-41d9-b165-0e032b09c9b4')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '3abba9dd-aa41-41a1-9d65-9f79e0ab69c3')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('3abba9dd-aa41-41a1-9d65-9f79e0ab69c3')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '43b264a7-5f9c-4765-a837-09420b7c11c7')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('43b264a7-5f9c-4765-a837-09420b7c11c7')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '86fb3939-6b5b-4c89-b40c-cc6e6b98615a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('86fb3939-6b5b-4c89-b40c-cc6e6b98615a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '8e81b8d4-2473-4052-a848-91ed35abb66c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('8e81b8d4-2473-4052-a848-91ed35abb66c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '193a5dcf-c83e-4fa3-90e0-621166da9ec3')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('193a5dcf-c83e-4fa3-90e0-621166da9ec3')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e33a0db7-0aa7-4595-a2bd-9a029e4db0c2')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e33a0db7-0aa7-4595-a2bd-9a029e4db0c2')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c6460895-1de5-4c97-888c-0f42dfc17678')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c6460895-1de5-4c97-888c-0f42dfc17678')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '42f8642f-cdc4-44f9-9084-bc17bed26a88')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('42f8642f-cdc4-44f9-9084-bc17bed26a88')

GO

GO
BEGIN /* REGION [ EnumChannelType ]*/
	DELETE FROM  [otp].[EnumChannelType]
	INSERT INTO [otp].[EnumChannelType](ChannelType, Name)Values
		('SMS','Short Message Service'),
		('EMAIL','e-Mail')
END

BEGIN /* REGION [ EnumStatus ]*/
	DELETE FROM  [otp].[EnumStatus]
	INSERT INTO [otp].[EnumStatus]([Status], [Description])Values
		('Pending','The code ready to use.'),
		('Expired','The code has expired.'),
		('Locked','The code is locked by entered wrong more than limitation.'),
		('Verified','The code is used.'),
		('Deleted','The code has been deleted by client or system.'),
		('Canceled','The code has been cancelled by system because client re-generate code again with same suid.')
END

BEGIN /* REGION [ Setting ]*/
	DELETE FROM  [otp].[Setting]
	INSERT INTO [otp].[Setting]([Key], [Value])Values
		('Expiration','900'),
		('RetryCount','3')
END

BEGIN /* REGION [ Account ]*/
	DELETE FROM  [otp].[Account]
	/*
	Raw ApiKey is 
	1phM4nLk14tefH8cntFJfuINtH0w_POg1zdKO9EPiu28TYjwLH0mOWzvcFiD0h3pPvf9wlhxhYk5hA6Ur0BHg8InK91GwhfCbW4kQU_6KkbKTb1H9gkOqTnFZxY4lPyl
	*/
	INSERT INTO [otp].[Account]([AccountId], [ApiKey], [Name], [IpAddress], [IsActive], [Description], [Salt], [Email])Values
		('5861F73F-CAD5-419D-96D4-56BD07211297','lLTHykjZ3oZ5ORx1ePayit2+orgbNxI8d5N3296EhT7lSawnoygnfjKbyQdTrxVFLlZ8AfDjn1OnW5Hy2oAgWg==', 'AccountTest', '192.168.1.69', 1, 'This is for testing', 'ALzIYz8BIgvLsk1q', 'Test@mail.com')
		
END
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.';


GO
