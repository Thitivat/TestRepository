<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccountsAreSame" xml:space="preserve">
    <value>Source and destination accounts are the same!</value>
  </data>
  <data name="AmountShouldNotBeZero" xml:space="preserve">
    <value>Amount should Not Be Zero!</value>
  </data>
  <data name="CenterNameWasNotFound" xml:space="preserve">
    <value>CenterName was not found!</value>
  </data>
  <data name="CouldNotResolveAccountFromAccountType" xml:space="preserve">
    <value>There was a problem getting the account from account type!</value>
  </data>
  <data name="CounterpartyBicShouldNotBeNull" xml:space="preserve">
    <value>CounterpartyBIC should not be null!</value>
  </data>
  <data name="CounterpartyIBANShouldNotBeNull" xml:space="preserve">
    <value>CounterpartyIBAN should not be null!</value>
  </data>
  <data name="CreditorsCityShouldNotBeNull" xml:space="preserve">
    <value>Creditor's city should not be null!</value>
  </data>
  <data name="CreditorsCountryCodeShouldNotBeNull" xml:space="preserve">
    <value>Creditor's country code should not be null!</value>
  </data>
  <data name="CreditorShouldNotBeNull" xml:space="preserve">
    <value>Creditor should not be null!</value>
  </data>
  <data name="CreditorsNameShouldNotBeNull" xml:space="preserve">
    <value>Creditor's name should not be null!</value>
  </data>
  <data name="CreditorsPostcodeShouldNotBeNull" xml:space="preserve">
    <value>Creditor's postcode should not be null!</value>
  </data>
  <data name="CreditorsStreetShouldNotBeNull" xml:space="preserve">
    <value>Creditor's street should not be null!</value>
  </data>
  <data name="DateNotEntered" xml:space="preserve">
    <value>You must enter a start date or an end date!</value>
  </data>
  <data name="DebtorsCityShouldNotBeNull" xml:space="preserve">
    <value>Debtor's city should not be null!</value>
  </data>
  <data name="DebtorsCountryCodeShouldNotBeNull" xml:space="preserve">
    <value>Debtor's country code should not be null!</value>
  </data>
  <data name="DebtorShouldNotBeNull" xml:space="preserve">
    <value>Debtor should not be null!</value>
  </data>
  <data name="DebtorsNameShouldNotBeNull" xml:space="preserve">
    <value>Debtor's name should not be null!</value>
  </data>
  <data name="DebtorsPostcodeShouldNotBeNull" xml:space="preserve">
    <value>Debtor's postcode should not be null!</value>
  </data>
  <data name="DebtorsStreetShouldNotBeNull" xml:space="preserve">
    <value>Debtor's street should not be null!</value>
  </data>
  <data name="DepartmentWasNotFound" xml:space="preserve">
    <value>The department was not found!</value>
  </data>
  <data name="EmptySweepEntity" xml:space="preserve">
    <value>Sweep entity cannot be null!</value>
  </data>
  <data name="EndDateMustBeBigger" xml:space="preserve">
    <value>The end date must be bigger than the start date!</value>
  </data>
  <data name="IbanNotConsistentWithSourceIban" xml:space="preserve">
    <value>Iban Not Consistent With Source Iban!</value>
  </data>
  <data name="IBANNotGiven" xml:space="preserve">
    <value>Please specify an IBAN!</value>
  </data>
  <data name="NoDateProvided" xml:space="preserve">
    <value>No Date was provided!</value>
  </data>
  <data name="NotSetAccount" xml:space="preserve">
    <value>An account type has to be specified!</value>
  </data>
  <data name="NotValidStartDate" xml:space="preserve">
    <value>Please specify a valid start date!</value>
  </data>
  <data name="NotValidValueDate" xml:space="preserve">
    <value>Please specify a valid value date!</value>
  </data>
  <data name="PaymentNotGiven" xml:space="preserve">
    <value>Payment was not given!</value>
  </data>
  <data name="UnitWasNotFound" xml:space="preserve">
    <value>Unit was not found!</value>
  </data>
  <data name="UnspecifiedAccount" xml:space="preserve">
    <value>Both accounts have to be specified!</value>
  </data>
  <data name="ZeroAmount" xml:space="preserve">
    <value>The amount should be greater than zero!</value>
  </data>
  <data name="NoSystemAccountProvided" xml:space="preserve">
    <value>At least one type of Account has to be provided!</value>
  </data>
  <data name="IdNotGiven" xml:space="preserve">
    <value>Id not given!</value>
  </data>
  <data name="InvalidMessageType" xml:space="preserve">
    <value>The specified message type is invalid!</value>
  </data>
  <data name="SavingsNull" xml:space="preserve">
    <value>Savings Account given should not be null!</value>
  </data>
  <data name="SavingsProductNotFound" xml:space="preserve">
    <value>Savings Product was not found!</value>
  </data>
  <data name="ClosingPaymentItemIsNull" xml:space="preserve">
    <value>Please specify a valid closing payment item!</value>
  </data>	
  <data name="Payment" xml:space="preserve">
    <value>Payment not given!</value>
  </data>
	<data name="NullReturnBucket" xml:space="preserve">
    <value>Please provide a valid return bucket!</value>
  </data>
</root>